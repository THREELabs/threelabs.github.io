<!DOCTYPE html>
<html>
<head>
    <title>Mage Battle</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/phaser/3.70.0/phaser.min.js"></script>
    <style>
        body {
            margin: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background: #2c3e50;
        }
    </style>
</head>
<body>
<script>
const config = {
    type: Phaser.AUTO,
    width: 800,
    height: 600,
    physics: {
        default: 'arcade',
        arcade: {
            gravity: { y: 0 },
            debug: false
        }
    },
    scene: {
        preload: preload,
        create: create,
        update: update
    }
};

const game = new Phaser.Game(config);

let player;
let npcs;
let walls;
let cursors;
let spells;
let playerMana = 100;
let manaRegenRate = 10;
let lastManaRegen = 0;
let lastFireballTime = 0;
let lastLightningTime = 0;
let fireballCooldown = 1000;
let lightningCooldown = 1500;
let manaText;
let debugText;
let targetText;
let isMouseDown = false;
let currentTarget = null;
let targetIndicator;

function preload() {
    this.load.image('player', '/api/placeholder/48/48');
    this.load.image('npc', '/api/placeholder/48/48');
    this.load.image('wall', '/api/placeholder/32/32');
    this.load.image('fireball', '/api/placeholder/16/16');
    this.load.image('lightning', '/api/placeholder/16/16');
    this.load.image('target', '/api/placeholder/52/52');
}

function create() {
    // Create walls
    walls = this.physics.add.staticGroup();
    createWalls(this);

    // Create player
    player = this.physics.add.sprite(100, 300, 'player');
    player.setCollideWorldBounds(true);
    player.setTint(0x00ff00);

    // Create target indicator system
    targetIndicator = this.add.graphics();
    targetIndicator.setVisible(false);

    // Create NPCs
    npcs = this.physics.add.group();
    createNPCs(this);

    // Create spells group
    spells = this.physics.add.group();

    // Set up collisions
    this.physics.add.collider(player, walls);
    this.physics.add.collider(npcs, walls);
    this.physics.add.collider(spells, walls, spellHitWall, null, this);
    this.physics.add.collider(spells, npcs, spellHitNPC, null, this);

    // Set up keyboard input
    cursors = this.input.keyboard.createCursorKeys();
    this.input.keyboard.on('keydown-Z', castFireball, this);
    this.input.keyboard.on('keydown-X', castLightning, this);

    // Set up mouse input
    this.input.on('pointerdown', (pointer) => {
        isMouseDown = true;
        handleTargeting.call(this, pointer);
    });
    this.input.on('pointerup', () => {
        isMouseDown = false;
    });

    // Add UI
    manaText = this.add.text(16, 16, 'Mana: 100', { fontSize: '18px', fill: '#fff' });
    debugText = this.add.text(16, 40, '', { fontSize: '18px', fill: '#fff' });
    targetText = this.add.text(16, 64, 'No Target', { fontSize: '18px', fill: '#fff' });
}

function handleTargeting(pointer) {
    let closestNPC = null;
    let closestDistance = 30; // Minimum distance to select target

    npcs.getChildren().forEach(npc => {
        const distance = Phaser.Math.Distance.Between(
            pointer.x,
            pointer.y,
            npc.x,
            npc.y
        );

        if (distance < closestDistance) {
            closestNPC = npc;
            closestDistance = distance;
        }
    });

    if (closestNPC) {
        setTarget(closestNPC);
        debugText.setText('Target acquired!');
    } else {
        clearTarget();
        debugText.setText('No target in range');
    }
}

function setTarget(npc) {
    // If clicking the same target, keep it
    if (currentTarget === npc) return;
    
    currentTarget = npc;
    targetText.setText(`Target: Enemy (${Math.floor(npc.health)} HP)`);
    targetIndicator.setVisible(true);
    
    // Flash effect on target selection
    npc.setTint(0xffff00);
    setTimeout(() => {
        if (npc.active) npc.setTint(0xff0000);
    }, 100);
}

function clearTarget() {
    currentTarget = null;
    targetText.setText('No Target');
    targetIndicator.setVisible(false);
}

function update(time) {
    // Update target indicator position
    // Update target visual indicator
    if (currentTarget && currentTarget.active) {
        targetIndicator.clear();
        targetIndicator.lineStyle(2, 0xffff00);
        targetIndicator.strokeCircle(currentTarget.x, currentTarget.y, 32);
        
        // Add pulsing effect
        const pulseScale = 1 + Math.sin(time / 200) * 0.2;
        targetIndicator.lineStyle(2, 0xffff00, 0.5);
        targetIndicator.strokeCircle(currentTarget.x, currentTarget.y, 32 * pulseScale);
        
        targetText.setText(`Target: Enemy (${Math.floor(currentTarget.health)} HP)`);
        targetIndicator.setVisible(true);
    } else if (currentTarget) {
        clearTarget();
    }

    // Player movement
    const speed = 160;
    player.setVelocity(0);

    // Keyboard movement
    if (cursors.left.isDown) {
        player.setVelocityX(-speed);
    } else if (cursors.right.isDown) {
        player.setVelocityX(speed);
    }

    if (cursors.up.isDown) {
        player.setVelocityY(-speed);
    } else if (cursors.down.isDown) {
        player.setVelocityY(speed);
    }

    // Mouse movement with minimum distance check
    if (isMouseDown) {
        const pointer = this.input.activePointer;
        const targetX = pointer.x + this.cameras.main.scrollX;
        const targetY = pointer.y + this.cameras.main.scrollY;
        
        // Calculate distance to cursor
        const distance = Phaser.Math.Distance.Between(
            player.x, player.y,
            targetX, targetY
        );
        
        // Only move if cursor is more than 30 pixels away from player
        if (distance > 30) {
            const angle = Phaser.Math.Angle.Between(
                player.x, player.y,
                targetX, targetY
            );
            
            player.setVelocity(
                Math.cos(angle) * speed,
                Math.sin(angle) * speed
            );
        } else {
            // Stop moving if cursor is too close
            player.setVelocity(0, 0);
        }
    }

    // Mana regeneration
    if (time > lastManaRegen + 1000) {
        playerMana = Math.min(100, playerMana + manaRegenRate);
        lastManaRegen = time;
        updateManaText();
    }

    // Update NPCs
    npcs.getChildren().forEach(npc => {
        updateNPC(npc, time);
    });
}

function createWalls(scene) {
    // Create border walls
    walls.create(400, 0, 'wall').setScale(50, 1).refreshBody();
    walls.create(400, 600, 'wall').setScale(50, 1).refreshBody();
    walls.create(0, 300, 'wall').setScale(1, 38).refreshBody();
    walls.create(800, 300, 'wall').setScale(1, 38).refreshBody();

    // Create some obstacles
    walls.create(200, 200, 'wall').setScale(3, 1).refreshBody().setTint(0x808080);
    walls.create(600, 400, 'wall').setScale(3, 1).refreshBody().setTint(0x808080);
    walls.create(400, 300, 'wall').setScale(1, 3).refreshBody().setTint(0x808080);
}

function createNPCs(scene) {
    const npcPositions = [
        { x: 700, y: 100 },
        { x: 700, y: 300 },
        { x: 700, y: 500 },
        { x: 500, y: 200 },
        { x: 500, y: 400 }
    ];

    npcPositions.forEach(pos => {
        const npc = npcs.create(pos.x, pos.y, 'npc');
        npc.setTint(0xff0000);
        npc.setCollideWorldBounds(true);
        npc.lastMove = 0;
        npc.moveDelay = 2000 + Math.random() * 1000;
        npc.health = 100;
        npc.healthBar = scene.add.rectangle(pos.x, pos.y - 30, 48, 6, 0xff0000);
        
        // Make NPCs interactive for clicking
        npc.setInteractive();
    });
}

function updateNPC(npc, time) {
    if (npc.healthBar) {
        npc.healthBar.x = npc.x;
        npc.healthBar.y = npc.y - 30;
        npc.healthBar.width = (npc.health / 100) * 48;
    }

    if (time > npc.lastMove + npc.moveDelay) {
        const speed = 100;
        const randomDirection = Phaser.Math.Between(0, 3);
        
        switch (randomDirection) {
            case 0: npc.setVelocity(0, -speed); break;
            case 1: npc.setVelocity(0, speed); break;
            case 2: npc.setVelocity(-speed, 0); break;
            case 3: npc.setVelocity(speed, 0); break;
        }

        npc.lastMove = time;
        npc.moveDelay = 2000 + Math.random() * 1000;

        setTimeout(() => {
            npc.setVelocity(0);
        }, 1000);
    }
}

function castSpell(type, scene) {
    if (!currentTarget) {
        debugText.setText('No target selected!');
        return false;
    }

    // Check line of sight to target
    const ray = new Phaser.Geom.Line(player.x, player.y, currentTarget.x, currentTarget.y);
    let hasLineOfSight = true;

    walls.getChildren().forEach(wall => {
        if (Phaser.Geom.Intersects.LineToRectangle(ray, wall.getBounds())) {
            hasLineOfSight = false;
        }
    });

    if (!hasLineOfSight) {
        debugText.setText('Target not in line of sight!');
        return false;
    }

    return true;
}

function castFireball(event) {
    const time = this.time.now;
    if (time < lastFireballTime + fireballCooldown) {
        debugText.setText('Fireball on cooldown!');
        return;
    }
    
    if (playerMana < 20) {
        debugText.setText('Not enough mana!');
        return;
    }

    if (!castSpell('fireball', this)) {
        return;
    }

    const spell = spells.create(player.x, player.y, 'fireball');
    spell.setTint(0xff6600);
    spell.type = 'fireball';
    spell.damage = 30;

    const angle = Phaser.Math.Angle.Between(
        player.x, player.y,
        currentTarget.x, currentTarget.y
    );
    
    const speed = 300;
    spell.setVelocity(
        Math.cos(angle) * speed,
        Math.sin(angle) * speed
    );

    playerMana -= 20;
    lastFireballTime = time;
    updateManaText();
    debugText.setText('Fireball cast!');
}

function castLightning(event) {
    const time = this.time.now;
    if (time < lastLightningTime + lightningCooldown) {
        debugText.setText('Lightning on cooldown!');
        return;
    }
    
    if (playerMana < 30) {
        debugText.setText('Not enough mana!');
        return;
    }

    if (!castSpell('lightning', this)) {
        return;
    }

    const spell = spells.create(player.x, player.y, 'lightning');
    spell.setTint(0x00ffff);
    spell.type = 'lightning';
    spell.damage = 45;

    const angle = Phaser.Math.Angle.Between(
        player.x, player.y,
        currentTarget.x, currentTarget.y
    );
    
    const speed = 400;
    spell.setVelocity(
        Math.cos(angle) * speed,
        Math.sin(angle) * speed
    );

    playerMana -= 30;
    lastLightningTime = time;
    updateManaText();
    debugText.setText('Lightning cast!');
}

function spellHitWall(spell, wall) {
    spell.destroy();
    debugText.setText('Spell hit wall!');
}

function spellHitNPC(spell, npc) {
    // Check line of sight before applying damage
    const ray = new Phaser.Geom.Line(player.x, player.y, npc.x, npc.y);
    let hasLineOfSight = true;

    walls.getChildren().forEach(wall => {
        if (Phaser.Geom.Intersects.LineToRectangle(ray, wall.getBounds())) {
            hasLineOfSight = false;
        }
    });

    if (hasLineOfSight) {
        npc.health -= spell.damage;
        if (npc.health <= 0) {
            if (currentTarget === npc) {
                clearTarget();
            }
            npc.healthBar.destroy();
            npc.destroy();
            debugText.setText(`Enemy defeated by ${spell.type}!`);
        } else {
            debugText.setText(`${spell.type} hit enemy! Health: ${Math.floor(npc.health)}`);
        }
    } else {
        debugText.setText('No line of sight!');
    }
    
    spell.destroy();
}

function updateManaText() {
    manaText.setText(`Mana: ${Math.floor(playerMana)}`);
}
</script>
</body>
</html>
